
avr-lm35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d7  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa1  00000000  00000000  00002473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e43  00000000  00000000  00003695  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 02 	call	0x54c	; 0x54c <main>
  64:	0c 94 03 04 	jmp	0x806	; 0x806 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_VoidWriteCommand>:
    {
        // Call LCD_VoidWriteData to send the character to the LCD
        LCD_VoidWriteChar(String[i]);
        _delay_ms(200);
    }
}
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
  84:	6c 2f       	mov	r22, r28
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 80 02 	call	0x500	; 0x500 <DIO_VoidSetPortValue>
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_VoidWriteCommand+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_VoidWriteCommand+0x34>
  a0:	00 00       	nop
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_VoidWriteCommand+0x44>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_VoidWriteCommand+0x4a>
  b6:	00 00       	nop
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <LCD_VoidInit>:
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 93 02 	call	0x526	; 0x526 <DIO_VoidSetPortDirection>
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	0e 94 94 01 	call	0x328	; 0x328 <DIO_VoidSetPinDirection>
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	0e 94 94 01 	call	0x328	; 0x328 <DIO_VoidSetPinDirection>
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	0e 94 94 01 	call	0x328	; 0x328 <DIO_VoidSetPinDirection>
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	97 e2       	ldi	r25, 0x27	; 39
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_VoidInit+0x2a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_VoidInit+0x30>
  ec:	00 00       	nop
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_VoidInit+0x3e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_VoidInit+0x44>
 100:	00 00       	nop
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_VoidInit+0x52>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_VoidInit+0x58>
 114:	00 00       	nop
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_VoidInit+0x66>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_VoidInit+0x6c>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <LCD_VoidWriteChar>:
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
 144:	6c 2f       	mov	r22, r28
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 80 02 	call	0x500	; 0x500 <DIO_VoidSetPortValue>
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
 156:	89 ef       	ldi	r24, 0xF9	; 249
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_VoidWriteChar+0x2e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_VoidWriteChar+0x34>
 160:	00 00       	nop
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_VoidSetPinValue>
 16c:	89 ef       	ldi	r24, 0xF9	; 249
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_VoidWriteChar+0x44>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_VoidWriteChar+0x4a>
 176:	00 00       	nop
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <LCD_VoidWriteNumber>:

// Function to write data (number) to the LCD
void LCD_VoidWriteNumber(u16 Number)
{
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ac 01       	movw	r20, r24
    u16 x = 0;
	u16 last_digit = 0;
	u16 zeroes = 0;
	
    // Reverse number first 
    while(Number != 0)
 190:	89 2b       	or	r24, r25
 192:	09 f4       	brne	.+2      	; 0x196 <LCD_VoidWriteNumber+0x1a>
 194:	7f c0       	rjmp	.+254    	; 0x294 <LCD_VoidWriteNumber+0x118>
 196:	a1 2c       	mov	r10, r1
 198:	b1 2c       	mov	r11, r1
 19a:	c1 2c       	mov	r12, r1
 19c:	d1 2c       	mov	r13, r1
    {
		last_digit = Number % 10;
 19e:	9a 01       	movw	r18, r20
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	9c 01       	movw	r18, r24
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	9a 01       	movw	r18, r20
 1cc:	28 1b       	sub	r18, r24
 1ce:	39 0b       	sbc	r19, r25
 1d0:	c9 01       	movw	r24, r18
		if (last_digit){
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	71 f0       	breq	.+28     	; 0x1f2 <LCD_VoidWriteNumber+0x76>
			rev = rev * 10 + last_digit;
 1d6:	96 01       	movw	r18, r12
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	cc 0c       	add	r12, r12
 1de:	dd 1c       	adc	r13, r13
 1e0:	cc 0c       	add	r12, r12
 1e2:	dd 1c       	adc	r13, r13
 1e4:	cc 0c       	add	r12, r12
 1e6:	dd 1c       	adc	r13, r13
 1e8:	c2 0e       	add	r12, r18
 1ea:	d3 1e       	adc	r13, r19
 1ec:	c8 0e       	add	r12, r24
 1ee:	d9 1e       	adc	r13, r25
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <LCD_VoidWriteNumber+0x7c>
		}
		else {
			zeroes ++;
 1f2:	3f ef       	ldi	r19, 0xFF	; 255
 1f4:	a3 1a       	sub	r10, r19
 1f6:	b3 0a       	sbc	r11, r19
		}
        Number /= 10;
 1f8:	9a 01       	movw	r18, r20
 1fa:	ad ec       	ldi	r26, 0xCD	; 205
 1fc:	bc ec       	ldi	r27, 0xCC	; 204
 1fe:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__umulhisi3>
 202:	ac 01       	movw	r20, r24
 204:	56 95       	lsr	r21
 206:	47 95       	ror	r20
 208:	56 95       	lsr	r21
 20a:	47 95       	ror	r20
 20c:	56 95       	lsr	r21
 20e:	47 95       	ror	r20
    u16 x = 0;
	u16 last_digit = 0;
	u16 zeroes = 0;
	
    // Reverse number first 
    while(Number != 0)
 210:	41 15       	cp	r20, r1
 212:	51 05       	cpc	r21, r1
 214:	21 f6       	brne	.-120    	; 0x19e <LCD_VoidWriteNumber+0x22>
 216:	3b c0       	rjmp	.+118    	; 0x28e <LCD_VoidWriteNumber+0x112>
 218:	75 01       	movw	r14, r10
    }
    
    // Send number one by one 
    while(rev != 0)
    {
        x = rev % 10;
 21a:	96 01       	movw	r18, r12
 21c:	ad ec       	ldi	r26, 0xCD	; 205
 21e:	bc ec       	ldi	r27, 0xCC	; 204
 220:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__umulhisi3>
 224:	ac 01       	movw	r20, r24
 226:	56 95       	lsr	r21
 228:	47 95       	ror	r20
 22a:	56 95       	lsr	r21
 22c:	47 95       	ror	r20
 22e:	56 95       	lsr	r21
 230:	47 95       	ror	r20
 232:	ca 01       	movw	r24, r20
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	48 0f       	add	r20, r24
 246:	59 1f       	adc	r21, r25
 248:	c6 01       	movw	r24, r12
 24a:	84 1b       	sub	r24, r20
 24c:	95 0b       	sbc	r25, r21
 24e:	ac 01       	movw	r20, r24
		rev /= 10;
 250:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__umulhisi3>
 254:	6c 01       	movw	r12, r24
 256:	d6 94       	lsr	r13
 258:	c7 94       	ror	r12
 25a:	d6 94       	lsr	r13
 25c:	c7 94       	ror	r12
 25e:	d6 94       	lsr	r13
 260:	c7 94       	ror	r12
		LCD_VoidWriteChar(x + 48);
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	84 0f       	add	r24, r20
 266:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_VoidWriteChar>
		for (int i = 0; i < zeroes; i++){
 26a:	a1 14       	cp	r10, r1
 26c:	b1 04       	cpc	r11, r1
 26e:	59 f0       	breq	.+22     	; 0x286 <LCD_VoidWriteNumber+0x10a>
 270:	10 e3       	ldi	r17, 0x30	; 48
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_VoidWriteChar(i + 48);
 276:	81 2f       	mov	r24, r17
 278:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_VoidWriteChar>
    while(rev != 0)
    {
        x = rev % 10;
		rev /= 10;
		LCD_VoidWriteChar(x + 48);
		for (int i = 0; i < zeroes; i++){
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	1f 5f       	subi	r17, 0xFF	; 255
 280:	ec 16       	cp	r14, r28
 282:	fd 06       	cpc	r15, r29
 284:	c1 f7       	brne	.-16     	; 0x276 <LCD_VoidWriteNumber+0xfa>
		}
        Number /= 10;
    }
    
    // Send number one by one 
    while(rev != 0)
 286:	c1 14       	cp	r12, r1
 288:	d1 04       	cpc	r13, r1
 28a:	39 f6       	brne	.-114    	; 0x21a <LCD_VoidWriteNumber+0x9e>
 28c:	03 c0       	rjmp	.+6      	; 0x294 <LCD_VoidWriteNumber+0x118>
 28e:	c1 14       	cp	r12, r1
 290:	d1 04       	cpc	r13, r1
 292:	11 f6       	brne	.-124    	; 0x218 <LCD_VoidWriteNumber+0x9c>
		LCD_VoidWriteChar(x + 48);
		for (int i = 0; i < zeroes; i++){
			LCD_VoidWriteChar(i + 48);
		}
    }
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	df 90       	pop	r13
 2a0:	cf 90       	pop	r12
 2a2:	bf 90       	pop	r11
 2a4:	af 90       	pop	r10
 2a6:	08 95       	ret

000002a8 <LCD_VoidSetPosition>:

// Function to set position in LCD
void LCD_VoidSetPosition(u8 Row, u8 Column)
{
	if(Row == 0)
 2a8:	81 11       	cpse	r24, r1
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <LCD_VoidSetPosition+0xe>
	{
		LCD_VoidWriteCommand(128 + Column);
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	86 0f       	add	r24, r22
 2b0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
 2b4:	08 95       	ret
	}
	if(Row == 1)
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <LCD_VoidSetPosition+0x1a>
	{
		LCD_VoidWriteCommand(128 + 64 + Column);
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	86 0f       	add	r24, r22
 2be:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
 2c2:	08 95       	ret

000002c4 <ADC_VoidInit>:

// Function to initialize the ADC
void ADC_VoidInit(void)
{
    // Select Vref = AVCC = 5v
    SET_BIT(ADMUX, REFS0);
 2c4:	3e 9a       	sbi	0x07, 6	; 7
    CLR_BIT(ADMUX, REFS1);
 2c6:	3f 98       	cbi	0x07, 7	; 7

    // Select right adjust result
    CLR_BIT(ADMUX, ADLAR);
 2c8:	3d 98       	cbi	0x07, 5	; 7

    // Enable ADC
    SET_BIT(ADCSRA, ADEN);
 2ca:	37 9a       	sbi	0x06, 7	; 6

    // Select single-ended conversion
    SET_BIT(ADCSRA, ADATE);
 2cc:	35 9a       	sbi	0x06, 5	; 6

    // ADC interrupt disable
    CLR_BIT(ADCSRA, ADIE);
 2ce:	33 98       	cbi	0x06, 3	; 6

    // Prescaler select bits (16-bits)
    CLR_BIT(ADCSRA, ADPS0);
 2d0:	30 98       	cbi	0x06, 0	; 6
    CLR_BIT(ADCSRA, ADPS1);
 2d2:	31 98       	cbi	0x06, 1	; 6
    SET_BIT(ADCSRA, ADPS2);
 2d4:	32 9a       	sbi	0x06, 2	; 6
 2d6:	08 95       	ret

000002d8 <ADC_u16ReadValue>:

// Function to read ADC value
u16 ADC_u16ReadValue(u8 CH_NUM)
{
    // Select channel
    ADMUX = ADMUX & 0b11100000;    // Clear channel selection to select new channel
 2d8:	97 b1       	in	r25, 0x07	; 7
 2da:	90 7e       	andi	r25, 0xE0	; 224
 2dc:	97 b9       	out	0x07, r25	; 7
    ADMUX = ADMUX | CH_NUM;
 2de:	97 b1       	in	r25, 0x07	; 7
 2e0:	89 2b       	or	r24, r25
 2e2:	87 b9       	out	0x07, r24	; 7

    // Strat conversion
    SET_BIT(ADCSRA, ADSC);
 2e4:	36 9a       	sbi	0x06, 6	; 6

    // Wait until conversion end
    while(GET_BIT(ADCSRA, ADIF) == 0);
 2e6:	34 9b       	sbis	0x06, 4	; 6
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <ADC_u16ReadValue+0xe>

    // Clear ADIF
    SET_BIT(ADCSRA, ADIF);
 2ea:	34 9a       	sbi	0x06, 4	; 6

    // Return ADC value from data register
    return ADC_D;
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	95 b1       	in	r25, 0x05	; 5
}
 2f0:	08 95       	ret

000002f2 <ADC_u16ToTemp>:
    // Calculate the analog voltage and corresponding temperature
	float voltage = (float)adcValue / 1024.0 * 5.0;
	u16 temperature = (u16)(voltage * 100);

	// Return temperature value
    return temperature;
 2f2:	bc 01       	movw	r22, r24
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatunsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5a e3       	ldi	r21, 0x3A	; 58
 304:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 ea       	ldi	r20, 0xA0	; 160
 30e:	50 e4       	ldi	r21, 0x40	; 64
 310:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	48 ec       	ldi	r20, 0xC8	; 200
 31a:	52 e4       	ldi	r21, 0x42	; 66
 31c:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3>
 320:	0e 94 ca 02 	call	0x594	; 0x594 <__fixunssfsi>
}
 324:	cb 01       	movw	r24, r22
 326:	08 95       	ret

00000328 <DIO_VoidSetPinDirection>:
    switch (Port)
    {
        case PORT_A: TOG_BIT(PORTA, Pin); break;
        case PORT_B: TOG_BIT(PORTB, Pin); break;
        case PORT_C: TOG_BIT(PORTC, Pin); break;
        case PORT_D: TOG_BIT(PORTD, Pin); break;
 328:	4f 3f       	cpi	r20, 0xFF	; 255
 32a:	b9 f5       	brne	.+110    	; 0x39a <DIO_VoidSetPinDirection+0x72>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	a1 f0       	breq	.+40     	; 0x358 <DIO_VoidSetPinDirection+0x30>
 330:	18 f4       	brcc	.+6      	; 0x338 <DIO_VoidSetPinDirection+0x10>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	31 f0       	breq	.+12     	; 0x342 <DIO_VoidSetPinDirection+0x1a>
 336:	08 95       	ret
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	c9 f0       	breq	.+50     	; 0x36e <DIO_VoidSetPinDirection+0x46>
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	11 f1       	breq	.+68     	; 0x384 <DIO_VoidSetPinDirection+0x5c>
 340:	08 95       	ret
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_VoidSetPinDirection+0x24>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_VoidSetPinDirection+0x20>
 350:	9a b3       	in	r25, 0x1a	; 26
 352:	89 2b       	or	r24, r25
 354:	8a bb       	out	0x1a, r24	; 26
 356:	08 95       	ret
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_VoidSetPinDirection+0x3a>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_VoidSetPinDirection+0x36>
 366:	97 b3       	in	r25, 0x17	; 23
 368:	89 2b       	or	r24, r25
 36a:	87 bb       	out	0x17, r24	; 23
 36c:	08 95       	ret
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_VoidSetPinDirection+0x50>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_VoidSetPinDirection+0x4c>
 37c:	94 b3       	in	r25, 0x14	; 20
 37e:	89 2b       	or	r24, r25
 380:	84 bb       	out	0x14, r24	; 20
 382:	08 95       	ret
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_VoidSetPinDirection+0x66>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_VoidSetPinDirection+0x62>
 392:	91 b3       	in	r25, 0x11	; 17
 394:	89 2b       	or	r24, r25
 396:	81 bb       	out	0x11, r24	; 17
 398:	08 95       	ret
 39a:	41 11       	cpse	r20, r1
 39c:	3a c0       	rjmp	.+116    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	a9 f0       	breq	.+42     	; 0x3cc <DIO_VoidSetPinDirection+0xa4>
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <DIO_VoidSetPinDirection+0x82>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <DIO_VoidSetPinDirection+0x8c>
 3a8:	08 95       	ret
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	d9 f0       	breq	.+54     	; 0x3e4 <DIO_VoidSetPinDirection+0xbc>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	29 f1       	breq	.+74     	; 0x3fc <DIO_VoidSetPinDirection+0xd4>
 3b2:	08 95       	ret
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_VoidSetPinDirection+0x96>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_VoidSetPinDirection+0x92>
 3c2:	80 95       	com	r24
 3c4:	9a b3       	in	r25, 0x1a	; 26
 3c6:	89 23       	and	r24, r25
 3c8:	8a bb       	out	0x1a, r24	; 26
 3ca:	08 95       	ret
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_VoidSetPinDirection+0xae>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_VoidSetPinDirection+0xaa>
 3da:	80 95       	com	r24
 3dc:	97 b3       	in	r25, 0x17	; 23
 3de:	89 23       	and	r24, r25
 3e0:	87 bb       	out	0x17, r24	; 23
 3e2:	08 95       	ret
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_VoidSetPinDirection+0xc6>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_VoidSetPinDirection+0xc2>
 3f2:	80 95       	com	r24
 3f4:	94 b3       	in	r25, 0x14	; 20
 3f6:	89 23       	and	r24, r25
 3f8:	84 bb       	out	0x14, r24	; 20
 3fa:	08 95       	ret
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	91 b3       	in	r25, 0x11	; 17
 40e:	89 23       	and	r24, r25
 410:	81 bb       	out	0x11, r24	; 17
 412:	08 95       	ret

00000414 <DIO_VoidSetPinValue>:
 414:	41 30       	cpi	r20, 0x01	; 1
 416:	b9 f5       	brne	.+110    	; 0x486 <DIO_VoidSetPinValue+0x72>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	a1 f0       	breq	.+40     	; 0x444 <DIO_VoidSetPinValue+0x30>
 41c:	18 f4       	brcc	.+6      	; 0x424 <DIO_VoidSetPinValue+0x10>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	31 f0       	breq	.+12     	; 0x42e <DIO_VoidSetPinValue+0x1a>
 422:	08 95       	ret
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	c9 f0       	breq	.+50     	; 0x45a <DIO_VoidSetPinValue+0x46>
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	11 f1       	breq	.+68     	; 0x470 <DIO_VoidSetPinValue+0x5c>
 42c:	08 95       	ret
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_VoidSetPinValue+0x24>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_VoidSetPinValue+0x20>
 43c:	9b b3       	in	r25, 0x1b	; 27
 43e:	89 2b       	or	r24, r25
 440:	8b bb       	out	0x1b, r24	; 27
 442:	08 95       	ret
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_VoidSetPinValue+0x3a>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_VoidSetPinValue+0x36>
 452:	98 b3       	in	r25, 0x18	; 24
 454:	89 2b       	or	r24, r25
 456:	88 bb       	out	0x18, r24	; 24
 458:	08 95       	ret
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_VoidSetPinValue+0x50>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_VoidSetPinValue+0x4c>
 468:	95 b3       	in	r25, 0x15	; 21
 46a:	89 2b       	or	r24, r25
 46c:	85 bb       	out	0x15, r24	; 21
 46e:	08 95       	ret
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_VoidSetPinValue+0x66>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_VoidSetPinValue+0x62>
 47e:	92 b3       	in	r25, 0x12	; 18
 480:	89 2b       	or	r24, r25
 482:	82 bb       	out	0x12, r24	; 18
 484:	08 95       	ret
 486:	41 11       	cpse	r20, r1
 488:	3a c0       	rjmp	.+116    	; 0x4fe <DIO_VoidSetPinValue+0xea>
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	a9 f0       	breq	.+42     	; 0x4b8 <DIO_VoidSetPinValue+0xa4>
 48e:	18 f4       	brcc	.+6      	; 0x496 <DIO_VoidSetPinValue+0x82>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	31 f0       	breq	.+12     	; 0x4a0 <DIO_VoidSetPinValue+0x8c>
 494:	08 95       	ret
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	d9 f0       	breq	.+54     	; 0x4d0 <DIO_VoidSetPinValue+0xbc>
 49a:	84 30       	cpi	r24, 0x04	; 4
 49c:	29 f1       	breq	.+74     	; 0x4e8 <DIO_VoidSetPinValue+0xd4>
 49e:	08 95       	ret
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_VoidSetPinValue+0x96>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_VoidSetPinValue+0x92>
 4ae:	80 95       	com	r24
 4b0:	9b b3       	in	r25, 0x1b	; 27
 4b2:	89 23       	and	r24, r25
 4b4:	8b bb       	out	0x1b, r24	; 27
 4b6:	08 95       	ret
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_VoidSetPinValue+0xae>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_VoidSetPinValue+0xaa>
 4c6:	80 95       	com	r24
 4c8:	98 b3       	in	r25, 0x18	; 24
 4ca:	89 23       	and	r24, r25
 4cc:	88 bb       	out	0x18, r24	; 24
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_VoidSetPinValue+0xc6>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	6a 95       	dec	r22
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_VoidSetPinValue+0xc2>
 4de:	80 95       	com	r24
 4e0:	95 b3       	in	r25, 0x15	; 21
 4e2:	89 23       	and	r24, r25
 4e4:	85 bb       	out	0x15, r24	; 21
 4e6:	08 95       	ret
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_VoidSetPinValue+0xde>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_VoidSetPinValue+0xda>
 4f6:	80 95       	com	r24
 4f8:	92 b3       	in	r25, 0x12	; 18
 4fa:	89 23       	and	r24, r25
 4fc:	82 bb       	out	0x12, r24	; 18
 4fe:	08 95       	ret

00000500 <DIO_VoidSetPortValue>:

// Function to set port value
void DIO_VoidSetPortValue(u8 Port, u8 Value)
{
    // Switch over port and set value
    switch (Port)
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	59 f0       	breq	.+22     	; 0x51a <DIO_VoidSetPortValue+0x1a>
 504:	18 f4       	brcc	.+6      	; 0x50c <DIO_VoidSetPortValue+0xc>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	31 f0       	breq	.+12     	; 0x516 <DIO_VoidSetPortValue+0x16>
 50a:	08 95       	ret
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	39 f0       	breq	.+14     	; 0x51e <DIO_VoidSetPortValue+0x1e>
 510:	84 30       	cpi	r24, 0x04	; 4
 512:	39 f0       	breq	.+14     	; 0x522 <DIO_VoidSetPortValue+0x22>
 514:	08 95       	ret
    {
        case PORT_A: PORTA = Value; break;
 516:	6b bb       	out	0x1b, r22	; 27
 518:	08 95       	ret
        case PORT_B: PORTB = Value; break;
 51a:	68 bb       	out	0x18, r22	; 24
 51c:	08 95       	ret
        case PORT_C: PORTC = Value; break;
 51e:	65 bb       	out	0x15, r22	; 21
 520:	08 95       	ret
        case PORT_D: PORTD = Value; break;
 522:	62 bb       	out	0x12, r22	; 18
 524:	08 95       	ret

00000526 <DIO_VoidSetPortDirection>:

// Function to set port direction
void DIO_VoidSetPortDirection(u8 Port, u8 Direction)
{
    // Switch over port and set dierction
    switch (Port)
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	59 f0       	breq	.+22     	; 0x540 <DIO_VoidSetPortDirection+0x1a>
 52a:	18 f4       	brcc	.+6      	; 0x532 <DIO_VoidSetPortDirection+0xc>
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	31 f0       	breq	.+12     	; 0x53c <DIO_VoidSetPortDirection+0x16>
 530:	08 95       	ret
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	39 f0       	breq	.+14     	; 0x544 <DIO_VoidSetPortDirection+0x1e>
 536:	84 30       	cpi	r24, 0x04	; 4
 538:	39 f0       	breq	.+14     	; 0x548 <DIO_VoidSetPortDirection+0x22>
 53a:	08 95       	ret
    {
        case PORT_A: DDRA = Direction; break;
 53c:	6a bb       	out	0x1a, r22	; 26
 53e:	08 95       	ret
        case PORT_B: DDRB = Direction; break;
 540:	67 bb       	out	0x17, r22	; 23
 542:	08 95       	ret
        case PORT_C: DDRC = Direction; break;
 544:	64 bb       	out	0x14, r22	; 20
 546:	08 95       	ret
        case PORT_D: DDRD = Direction; break;
 548:	61 bb       	out	0x11, r22	; 17
 54a:	08 95       	ret

0000054c <main>:

// Main function
int main(void)
{
	// Initialize the LCD
	LCD_VoidInit();
 54c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_VoidInit>

	// Initialize ADC
	ADC_VoidInit();
 550:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ADC_VoidInit>

	// Program loop
	while(1)
	{
		// Get ADC reading
		digital_value = ADC_u16ReadValue(0);
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <ADC_u16ReadValue>

		// Get analog value
		analog_value = ADC_u16ToTemp(digital_value);
 55a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC_u16ToTemp>
 55e:	ec 01       	movw	r28, r24

		// Clear LCD screen
		LCD_VoidWriteCommand(0);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_VoidWriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 566:	8f e3       	ldi	r24, 0x3F	; 63
 568:	9f e1       	ldi	r25, 0x1F	; 31
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x1e>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x24>
 570:	00 00       	nop
		_delay_ms(2);

		// Reposition LCD writing position
		LCD_VoidSetPosition(0,0);
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_VoidSetPosition>

		// Display value in LCD then delay for 500ms
		LCD_VoidWriteNumber(analog_value);
 57a:	ce 01       	movw	r24, r28
 57c:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_VoidWriteNumber>
 580:	9f ef       	ldi	r25, 0xFF	; 255
 582:	29 e6       	ldi	r18, 0x69	; 105
 584:	88 e1       	ldi	r24, 0x18	; 24
 586:	91 50       	subi	r25, 0x01	; 1
 588:	20 40       	sbci	r18, 0x00	; 0
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x3a>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x44>
 590:	00 00       	nop
 592:	e0 cf       	rjmp	.-64     	; 0x554 <main+0x8>

00000594 <__fixunssfsi>:
 594:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_splitA>
 598:	88 f0       	brcs	.+34     	; 0x5bc <__fixunssfsi+0x28>
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	98 f0       	brcs	.+38     	; 0x5c4 <__fixunssfsi+0x30>
 59e:	b9 2f       	mov	r27, r25
 5a0:	99 27       	eor	r25, r25
 5a2:	b7 51       	subi	r27, 0x17	; 23
 5a4:	b0 f0       	brcs	.+44     	; 0x5d2 <__fixunssfsi+0x3e>
 5a6:	e1 f0       	breq	.+56     	; 0x5e0 <__fixunssfsi+0x4c>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a f0       	brmi	.+6      	; 0x5b8 <__fixunssfsi+0x24>
 5b2:	ba 95       	dec	r27
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__fixunssfsi+0x14>
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__fixunssfsi+0x4c>
 5b8:	b1 30       	cpi	r27, 0x01	; 1
 5ba:	91 f0       	breq	.+36     	; 0x5e0 <__fixunssfsi+0x4c>
 5bc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_zero>
 5c0:	b1 e0       	ldi	r27, 0x01	; 1
 5c2:	08 95       	ret
 5c4:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_zero>
 5c8:	67 2f       	mov	r22, r23
 5ca:	78 2f       	mov	r23, r24
 5cc:	88 27       	eor	r24, r24
 5ce:	b8 5f       	subi	r27, 0xF8	; 248
 5d0:	39 f0       	breq	.+14     	; 0x5e0 <__fixunssfsi+0x4c>
 5d2:	b9 3f       	cpi	r27, 0xF9	; 249
 5d4:	cc f3       	brlt	.-14     	; 0x5c8 <__fixunssfsi+0x34>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b3 95       	inc	r27
 5de:	d9 f7       	brne	.-10     	; 0x5d6 <__fixunssfsi+0x42>
 5e0:	3e f4       	brtc	.+14     	; 0x5f0 <__fixunssfsi+0x5c>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__floatunsisf>:
 5f2:	e8 94       	clt
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__floatsisf+0x12>

000005f6 <__floatsisf>:
 5f6:	97 fb       	bst	r25, 7
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__floatsisf+0x12>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	99 23       	and	r25, r25
 60a:	a9 f0       	breq	.+42     	; 0x636 <__floatsisf+0x40>
 60c:	f9 2f       	mov	r31, r25
 60e:	96 e9       	ldi	r25, 0x96	; 150
 610:	bb 27       	eor	r27, r27
 612:	93 95       	inc	r25
 614:	f6 95       	lsr	r31
 616:	87 95       	ror	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f1 11       	cpse	r31, r1
 620:	f8 cf       	rjmp	.-16     	; 0x612 <__floatsisf+0x1c>
 622:	fa f4       	brpl	.+62     	; 0x662 <__floatsisf+0x6c>
 624:	bb 0f       	add	r27, r27
 626:	11 f4       	brne	.+4      	; 0x62c <__floatsisf+0x36>
 628:	60 ff       	sbrs	r22, 0
 62a:	1b c0       	rjmp	.+54     	; 0x662 <__floatsisf+0x6c>
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	16 c0       	rjmp	.+44     	; 0x662 <__floatsisf+0x6c>
 636:	88 23       	and	r24, r24
 638:	11 f0       	breq	.+4      	; 0x63e <__floatsisf+0x48>
 63a:	96 e9       	ldi	r25, 0x96	; 150
 63c:	11 c0       	rjmp	.+34     	; 0x660 <__floatsisf+0x6a>
 63e:	77 23       	and	r23, r23
 640:	21 f0       	breq	.+8      	; 0x64a <__floatsisf+0x54>
 642:	9e e8       	ldi	r25, 0x8E	; 142
 644:	87 2f       	mov	r24, r23
 646:	76 2f       	mov	r23, r22
 648:	05 c0       	rjmp	.+10     	; 0x654 <__floatsisf+0x5e>
 64a:	66 23       	and	r22, r22
 64c:	71 f0       	breq	.+28     	; 0x66a <__floatsisf+0x74>
 64e:	96 e8       	ldi	r25, 0x86	; 134
 650:	86 2f       	mov	r24, r22
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	2a f0       	brmi	.+10     	; 0x662 <__floatsisf+0x6c>
 658:	9a 95       	dec	r25
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	da f7       	brpl	.-10     	; 0x658 <__floatsisf+0x62>
 662:	88 0f       	add	r24, r24
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__fp_split3>:
 66c:	57 fd       	sbrc	r21, 7
 66e:	90 58       	subi	r25, 0x80	; 128
 670:	44 0f       	add	r20, r20
 672:	55 1f       	adc	r21, r21
 674:	59 f0       	breq	.+22     	; 0x68c <__fp_splitA+0x10>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	71 f0       	breq	.+28     	; 0x696 <__fp_splitA+0x1a>
 67a:	47 95       	ror	r20

0000067c <__fp_splitA>:
 67c:	88 0f       	add	r24, r24
 67e:	97 fb       	bst	r25, 7
 680:	99 1f       	adc	r25, r25
 682:	61 f0       	breq	.+24     	; 0x69c <__fp_splitA+0x20>
 684:	9f 3f       	cpi	r25, 0xFF	; 255
 686:	79 f0       	breq	.+30     	; 0x6a6 <__fp_splitA+0x2a>
 688:	87 95       	ror	r24
 68a:	08 95       	ret
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	55 1f       	adc	r21, r21
 694:	f2 cf       	rjmp	.-28     	; 0x67a <__fp_split3+0xe>
 696:	46 95       	lsr	r20
 698:	f1 df       	rcall	.-30     	; 0x67c <__fp_splitA>
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <__fp_splitA+0x30>
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	f1 cf       	rjmp	.-30     	; 0x688 <__fp_splitA+0xc>
 6a6:	86 95       	lsr	r24
 6a8:	71 05       	cpc	r23, r1
 6aa:	61 05       	cpc	r22, r1
 6ac:	08 94       	sec
 6ae:	08 95       	ret

000006b0 <__fp_zero>:
 6b0:	e8 94       	clt

000006b2 <__fp_szero>:
 6b2:	bb 27       	eor	r27, r27
 6b4:	66 27       	eor	r22, r22
 6b6:	77 27       	eor	r23, r23
 6b8:	cb 01       	movw	r24, r22
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret

000006be <__mulsf3>:
 6be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3x>
 6c2:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_round>
 6c6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_pscA>
 6ca:	38 f0       	brcs	.+14     	; 0x6da <__mulsf3+0x1c>
 6cc:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscB>
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__mulsf3+0x1c>
 6d2:	95 23       	and	r25, r21
 6d4:	11 f0       	breq	.+4      	; 0x6da <__mulsf3+0x1c>
 6d6:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_inf>
 6da:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_nan>
 6de:	11 24       	eor	r1, r1
 6e0:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>

000006e4 <__mulsf3x>:
 6e4:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_split3>
 6e8:	70 f3       	brcs	.-36     	; 0x6c6 <__mulsf3+0x8>

000006ea <__mulsf3_pse>:
 6ea:	95 9f       	mul	r25, r21
 6ec:	c1 f3       	breq	.-16     	; 0x6de <__mulsf3+0x20>
 6ee:	95 0f       	add	r25, r21
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	55 1f       	adc	r21, r21
 6f4:	62 9f       	mul	r22, r18
 6f6:	f0 01       	movw	r30, r0
 6f8:	72 9f       	mul	r23, r18
 6fa:	bb 27       	eor	r27, r27
 6fc:	f0 0d       	add	r31, r0
 6fe:	b1 1d       	adc	r27, r1
 700:	63 9f       	mul	r22, r19
 702:	aa 27       	eor	r26, r26
 704:	f0 0d       	add	r31, r0
 706:	b1 1d       	adc	r27, r1
 708:	aa 1f       	adc	r26, r26
 70a:	64 9f       	mul	r22, r20
 70c:	66 27       	eor	r22, r22
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	66 1f       	adc	r22, r22
 714:	82 9f       	mul	r24, r18
 716:	22 27       	eor	r18, r18
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	62 1f       	adc	r22, r18
 71e:	73 9f       	mul	r23, r19
 720:	b0 0d       	add	r27, r0
 722:	a1 1d       	adc	r26, r1
 724:	62 1f       	adc	r22, r18
 726:	83 9f       	mul	r24, r19
 728:	a0 0d       	add	r26, r0
 72a:	61 1d       	adc	r22, r1
 72c:	22 1f       	adc	r18, r18
 72e:	74 9f       	mul	r23, r20
 730:	33 27       	eor	r19, r19
 732:	a0 0d       	add	r26, r0
 734:	61 1d       	adc	r22, r1
 736:	23 1f       	adc	r18, r19
 738:	84 9f       	mul	r24, r20
 73a:	60 0d       	add	r22, r0
 73c:	21 1d       	adc	r18, r1
 73e:	82 2f       	mov	r24, r18
 740:	76 2f       	mov	r23, r22
 742:	6a 2f       	mov	r22, r26
 744:	11 24       	eor	r1, r1
 746:	9f 57       	subi	r25, 0x7F	; 127
 748:	50 40       	sbci	r21, 0x00	; 0
 74a:	9a f0       	brmi	.+38     	; 0x772 <__mulsf3_pse+0x88>
 74c:	f1 f0       	breq	.+60     	; 0x78a <__mulsf3_pse+0xa0>
 74e:	88 23       	and	r24, r24
 750:	4a f0       	brmi	.+18     	; 0x764 <__mulsf3_pse+0x7a>
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	bb 1f       	adc	r27, r27
 758:	66 1f       	adc	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	91 50       	subi	r25, 0x01	; 1
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	a9 f7       	brne	.-22     	; 0x74e <__mulsf3_pse+0x64>
 764:	9e 3f       	cpi	r25, 0xFE	; 254
 766:	51 05       	cpc	r21, r1
 768:	80 f0       	brcs	.+32     	; 0x78a <__mulsf3_pse+0xa0>
 76a:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_inf>
 76e:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	e4 f3       	brlt	.-8      	; 0x76e <__mulsf3_pse+0x84>
 776:	98 3e       	cpi	r25, 0xE8	; 232
 778:	d4 f3       	brlt	.-12     	; 0x76e <__mulsf3_pse+0x84>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f7 95       	ror	r31
 784:	e7 95       	ror	r30
 786:	9f 5f       	subi	r25, 0xFF	; 255
 788:	c1 f7       	brne	.-16     	; 0x77a <__mulsf3_pse+0x90>
 78a:	fe 2b       	or	r31, r30
 78c:	88 0f       	add	r24, r24
 78e:	91 1d       	adc	r25, r1
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_inf>:
 798:	97 f9       	bld	r25, 7
 79a:	9f 67       	ori	r25, 0x7F	; 127
 79c:	80 e8       	ldi	r24, 0x80	; 128
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	08 95       	ret

000007a4 <__fp_nan>:
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
 7a6:	80 ec       	ldi	r24, 0xC0	; 192
 7a8:	08 95       	ret

000007aa <__fp_pscA>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	09 06       	cpc	r0, r25
 7b6:	08 95       	ret

000007b8 <__fp_pscB>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	12 16       	cp	r1, r18
 7be:	13 06       	cpc	r1, r19
 7c0:	14 06       	cpc	r1, r20
 7c2:	05 06       	cpc	r0, r21
 7c4:	08 95       	ret

000007c6 <__fp_round>:
 7c6:	09 2e       	mov	r0, r25
 7c8:	03 94       	inc	r0
 7ca:	00 0c       	add	r0, r0
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__fp_round+0xc>
 7ce:	88 23       	and	r24, r24
 7d0:	52 f0       	brmi	.+20     	; 0x7e6 <__fp_round+0x20>
 7d2:	bb 0f       	add	r27, r27
 7d4:	40 f4       	brcc	.+16     	; 0x7e6 <__fp_round+0x20>
 7d6:	bf 2b       	or	r27, r31
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0x18>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__fp_round+0x20>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__umulhisi3>:
 7e8:	a2 9f       	mul	r26, r18
 7ea:	b0 01       	movw	r22, r0
 7ec:	b3 9f       	mul	r27, r19
 7ee:	c0 01       	movw	r24, r0
 7f0:	a3 9f       	mul	r26, r19
 7f2:	70 0d       	add	r23, r0
 7f4:	81 1d       	adc	r24, r1
 7f6:	11 24       	eor	r1, r1
 7f8:	91 1d       	adc	r25, r1
 7fa:	b2 9f       	mul	r27, r18
 7fc:	70 0d       	add	r23, r0
 7fe:	81 1d       	adc	r24, r1
 800:	11 24       	eor	r1, r1
 802:	91 1d       	adc	r25, r1
 804:	08 95       	ret

00000806 <_exit>:
 806:	f8 94       	cli

00000808 <__stop_program>:
 808:	ff cf       	rjmp	.-2      	; 0x808 <__stop_program>
